<xml xmlns="http://www.w3.org/1999/xhtml">
  <block type="new_event_start" id="vPEah;f,5Vq@@LR1BgJI" deletable="false" movable="false" x="18" y="148">
    <next>
      <block type="control_loop_forever" id="+-.!Ri*WUcQc|siGEAfb">
        <statement name="SUBSTACK">
          <block type="control_loop_event" id=")b2{wXT`a{KKq`}QBf5|">
            <statement name="SUBSTACK">
              <block type="light_sound_note_tempo" id="nUd^O8L;%Q|4NhAFEB#C">
                <value name="CHOICE">
                  <shadow type="dropdown_light_sound_note_tempo" id="jQ~ae4u|/8{v^bMbF4pZ">
                    <field name="CHOICE">1</field>
                  </shadow>
                </value>
                <next>
                  <block type="light_sound_play_eighth" id=";{5-3c]BX.p`RVln*J-y">
                    <value name="CHOICE">
                      <shadow type="dropdown_light_sound_play_eighth" id="=,]^SVLWf,]dy-Lv1@g_">
                        <field name="CHOICE">F</field>
                      </shadow>
                    </value>
                    <next>
                      <block type="light_sound_play_eighth" id="}3k2_PgP)v2uw4U-do_-">
                        <value name="CHOICE">
                          <shadow type="dropdown_light_sound_play_eighth" id="ly~obIE8Dn[[NI])^p]Z">
                            <field name="CHOICE">A</field>
                          </shadow>
                        </value>
                        <next>
                          <block type="light_sound_play_eighth" id="7f8j.zvr`eSVHg.1s/g~">
                            <value name="CHOICE">
                              <shadow type="dropdown_light_sound_play_eighth" id="tMioshPRXw*j)G!VV)7?">
                                <field name="CHOICE">A</field>
                              </shadow>
                            </value>
                            <next>
                              <block type="light_sound_rest" id="(=2QM(o[W1Q?qo^N@@V#">
                                <value name="CHOICE">
                                  <shadow type="dropdown_light_sound_rest" id="~.Gk@:lUaatP(Sy?90z}">
                                    <field name="CHOICE">25</field>
                                  </shadow>
                                </value>
                                <next>
                                  <block type="light_sound_play_whole" id="W6A%jk`Wl:+_K*TyAOD%">
                                    <value name="CHOICE">
                                      <shadow type="dropdown_light_sound_play_whole" id="2mRPK_BKY;kR4XVFT.(4">
                                        <field name="CHOICE">A</field>
                                      </shadow>
                                    </value>
                                    <next>
                                      <block type="light_sound_play_eighth" id="`uDf#0!RNCdX!jv.[?Iv">
                                        <value name="CHOICE">
                                          <shadow type="dropdown_light_sound_play_eighth" id="##cK(FOIJ.BEL6ulG(qZ">
                                            <field name="CHOICE">C</field>
                                          </shadow>
                                        </value>
                                        <next>
                                          <block type="light_sound_note_tempo" id="nY5q9LgsZoTx/9K*^ebI">
                                            <value name="CHOICE">
                                              <shadow type="dropdown_light_sound_note_tempo" id="=h8MUG=iRDF)KwY%ZFzj">
                                                <field name="CHOICE">4</field>
                                              </shadow>
                                            </value>
                                            <next>
                                              <block type="light_sound_note_sharp" id="|!:J1{BZWQtZWe9A2dg6">
                                                <next>
                                                  <block type="light_sound_play_eighth" id="TQP0!Qh/-mp5SlFrjUYO">
                                                    <value name="CHOICE">
                                                      <shadow type="dropdown_light_sound_play_eighth" id="s!#SdR%GOE|]+-[@]}iR">
                                                        <field name="CHOICE">Chigh</field>
                                                      </shadow>
                                                    </value>
                                                    <next>
                                                      <block type="light_sound_play_eighth" id="8FHsRY7/_Ro/gkExM3)x">
                                                        <value name="CHOICE">
                                                          <shadow type="dropdown_light_sound_play_eighth" id="CX=*PJm_|o_b(D`{ip)!">
                                                            <field name="CHOICE">E</field>
                                                          </shadow>
                                                        </value>
                                                      </block>
                                                    </next>
                                                  </block>
                                                </next>
                                              </block>
                                            </next>
                                          </block>
                                        </next>
                                      </block>
                                    </next>
                                  </block>
                                </next>
                              </block>
                            </next>
                          </block>
                        </next>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </statement>
            <value name="CHOICE">
              <shadow type="dropdown_control_setloop_event" id="EihQ#nlZ:1:%=X#0+^U7">
                <field name="CHOICE">circle</field>
              </shadow>
            </value>
            <next>
              <block type="control_wait_event" id="@-D|CXgv*Bs#?Goxtx!=">
                <value name="CHOICE">
                  <shadow type="dropdown_control_setwait_event" id="wop0M_PG!IUKUPp|Zz~6">
                    <field name="CHOICE">triangle</field>
                  </shadow>
                </value>
              </block>
            </next>
          </block>
        </statement>
      </block>
    </next>
  </block>
  <block type="light_sound_play_eighth" id="m67VR}isMlK3#HgOA*i)" x="509" y="905">
    <value name="CHOICE">
      <shadow type="dropdown_light_sound_play_eighth" id="|D:Q8RB5DIs{s-3yRF-L">
        <field name="CHOICE">A</field>
      </shadow>
    </value>
  </block>
</xml>