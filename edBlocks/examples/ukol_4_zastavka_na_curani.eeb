<xml xmlns="http://www.w3.org/1999/xhtml">
  <block type="new_event_start" id="vPEah;f,5Vq@@LR1BgJI" deletable="false" movable="false" x="18" y="148">
    <next>
      <block type="drive_line_tracking_time" id="~o4C/3O8rCV1oQjavt.P">
        <value name="DURATION">
          <shadow type="math_positive_number" id="ALlh7-7DgKK2c9s}Azu^">
            <field name="NUM">10</field>
          </shadow>
        </value>
        <next>
          <block type="drive_left_time" id="D[7ly#j){Vg,^BbXZ%JJ">
            <value name="DURATION">
              <shadow type="math_positive_number" id="I,Z2T(COzv[RG;t[+:ce">
                <field name="NUM">1</field>
              </shadow>
            </value>
            <next>
              <block type="drive_speed" id="6`mS=0Kj6FhXINa3XQ~/">
                <value name="CHOICE">
                  <shadow type="dropdown_drive_setspeed" id="_?V;}0O/MPP=q|kF_k2X">
                    <field name="CHOICE">10</field>
                  </shadow>
                </value>
                <next>
                  <block type="drive_forwards_time" id="A}CM0H0h|V:E8GJ9}j([">
                    <value name="DURATION">
                      <shadow type="math_positive_number" id="8e.k8.lH?n%{WoZAZrnD">
                        <field name="NUM">1</field>
                      </shadow>
                    </value>
                  </block>
                </next>
              </block>
            </next>
          </block>
        </next>
      </block>
    </next>
  </block>
</xml>